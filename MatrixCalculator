#include <iostream>
using namespace std;

const int MAX = 10;

class Matrix {
    int mat[MAX][MAX];
    int rows, cols;

public:
    Matrix(int r = 0, int c = 0) {
        rows = r;
        cols = c;
    }

    void input() {
        cout << "Enter elements (" << rows << "x" << cols << "):\n";
        for (int i = 0; i < rows; ++i)
            for (int j = 0; j < cols; ++j)
                cin >> mat[i][j];
    }

    void display() const {
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j)
                cout << mat[i][j] << " ";
            cout << endl;
        }
    }

    Matrix add(const Matrix &m) const {
        Matrix res(rows, cols);
        if (rows != m.rows || cols != m.cols) {
            cout << "Matrix dimensions mismatch!\n";
            return res;
        }
        for (int i = 0; i < rows; ++i)
            for (int j = 0; j < cols; ++j)
                res.mat[i][j] = mat[i][j] + m.mat[i][j];
        return res;
    }

    Matrix subtract(const Matrix &m) const {
        Matrix res(rows, cols);
        if (rows != m.rows || cols != m.cols) {
            cout << "Matrix dimensions mismatch!\n";
            return res;
        }
        for (int i = 0; i < rows; ++i)
            for (int j = 0; j < cols; ++j)
                res.mat[i][j] = mat[i][j] - m.mat[i][j];
        return res;
    }

    Matrix multiply(const Matrix &m) const {
        Matrix res(rows, m.cols);
        if (cols != m.rows) {
            cout << "Matrix multiplication not possible!\n";
            return res;
        }
        for (int i = 0; i < rows; ++i)
            for (int j = 0; j < m.cols; ++j) {
                res.mat[i][j] = 0;
                for (int k = 0; k < cols; ++k)
                    res.mat[i][j] += mat[i][k] * m.mat[k][j];
            }
        return res;
    }

    Matrix transpose() const {
        Matrix res(cols, rows);
        for (int i = 0; i < rows; ++i)
            for (int j = 0; j < cols; ++j)
                res.mat[j][i] = mat[i][j];
        return res;
    }

    int getRows() const { return rows; }
    int getCols() const { return cols; }
};

int main() {
    int r1, c1, r2, c2;
    cout << "Enter rows and columns of Matrix A: ";
    cin >> r1 >> c1;
    Matrix A(r1, c1);
    A.input();

    cout << "Enter rows and columns of Matrix B: ";
    cin >> r2 >> c2;
    Matrix B(r2, c2);
    B.input();

    int choice;
    do {
        cout << "\nMatrix Calculator Menu:\n";
        cout << "1. Add\n2. Subtract\n3. Multiply\n4. Transpose A\n5. Transpose B\n0. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        Matrix result;
        switch (choice) {
        case 1:
            result = A.add(B);
            cout << "Result of A + B:\n";
            result.display();
            break;
        case 2:
            result = A.subtract(B);
            cout << "Result of A - B:\n";
            result.display();
            break;
        case 3:
            result = A.multiply(B);
            cout << "Result of A * B:\n";
            result.display();
            break;
        case 4:
            result = A.transpose();
            cout << "Transpose of Matrix A:\n";
            result.display();
            break;
        case 5:
            result = B.transpose();
            cout << "Transpose of Matrix B:\n";
            result.display();
            break;
        case 0:
            cout << "Exiting...\n";
            break;
        default:
            cout << "Invalid choice!\n";
        }
    } while (choice != 0);

    return 0;
}
